#pragma comment(lib,"wininet.lib")

#define SP 0 //Verbose


#ifndef _HOOK_H_
#define _HOOK_H_


extern LPVOID(WINAPI *HeapAllocNext)(_In_ HANDLE hHeap, _In_ DWORD  dwFlags, _In_ SIZE_T dwBytes);
LPVOID WINAPI HeapAllocCallback(_In_ HANDLE hHeap, _In_ DWORD  dwFlags, _In_ SIZE_T dwBytes);

extern ULONG(WINAPI *CreateProcessWNext) (LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes,
	LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment,
	LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
ULONG WINAPI CreateProcessWCallback(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes,
	LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment,
	LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);

extern UINT(WINAPI *WinExecNext)(_In_ LPCSTR lpCmdLine, _In_ UINT   uCmdShow);
UINT WINAPI WinExecCallback(_In_ LPCSTR lpCmdLine, _In_ UINT   uCmdShow);

extern HINSTANCE(WINAPI *ShellExecuteWNext)(_In_opt_ HWND    hwnd, _In_opt_ LPCWSTR lpOperation, _In_     LPCWSTR lpFile, _In_opt_ LPCWSTR lpParameters, _In_opt_ LPCWSTR lpDirectory, _In_ INT nShowCmd);
HINSTANCE ShellExecuteWCallback(_In_opt_ HWND    hwnd, _In_opt_ LPCWSTR lpOperation, _In_     LPCWSTR lpFile, _In_opt_ LPCWSTR lpParameters, _In_opt_ LPCWSTR lpDirectory, _In_ INT nShowCmd);

extern HMODULE(WINAPI *LoadLibraryExWNext)(_In_ LPCWSTR lpFileName, _Reserved_ HANDLE  hFile, _In_  DWORD  dwFlags);
HMODULE WINAPI LoadLibraryExWCallback(_In_ LPCWSTR lpFileName, _Reserved_ HANDLE  hFile, _In_  DWORD  dwFlags);

extern HMODULE (WINAPI *GetModuleHandleWNext)(_In_opt_ LPCWSTR lpModuleName);
HMODULE WINAPI GetModuleHandleWCallback(_In_opt_ LPCWSTR lpModuleName);

extern int (*systemNext)(const char *command);
int systemCallback(const char *command);

extern int (*_wsystemNext)(const wchar_t *command);
int _wsystemCallback(const wchar_t *command);

extern HRESULT (*URLDownloadToFileWNext)(LPUNKNOWN pCaller, LPCTSTR szURL, LPCWSTR szFileName, _Reserved_ DWORD dwReserved, LPBINDSTATUSCALLBACK lpfnCB);
HRESULT URLDownloadToFileWCallback(LPUNKNOWN pCaller,LPCTSTR szURL,LPCWSTR szFileName,_Reserved_ DWORD dwReserved,LPBINDSTATUSCALLBACK lpfnCB);

extern HRESULT (*URLDownloadToFileANext)(LPUNKNOWN pCaller, LPCTSTR szURL, LPCSTR szFileName, _Reserved_ DWORD dwReserved, LPBINDSTATUSCALLBACK lpfnCB);
HRESULT URLDownloadToFileACallback(LPUNKNOWN pCaller, LPCTSTR szURL, LPCSTR szFileName, _Reserved_ DWORD dwReserved, LPBINDSTATUSCALLBACK lpfnCB);

extern BOOL (WINAPI *InternetReadFileNext)(_In_ HINTERNET hFile, _Out_ LPVOID lpBuffer, _In_  DWORD dwNumberOfBytesToRead, _Out_ LPDWORD lpdwNumberOfBytesRead);
BOOL WINAPI InternetReadFileCallback(_In_ HINTERNET hFile,_Out_ LPVOID lpBuffer,_In_  DWORD dwNumberOfBytesToRead,_Out_ LPDWORD lpdwNumberOfBytesRead);

extern BOOL (WINAPI *InternetReadFileExWNext)(_In_  HINTERNET hFile, _Out_ LPINTERNET_BUFFERSW lpBuffersOut, _In_  DWORD dwFlags, _In_  DWORD_PTR dwContext);
BOOL WINAPI InternetReadFileExWCallback(_In_  HINTERNET hFile,_Out_ LPINTERNET_BUFFERSW lpBuffersOut,_In_  DWORD dwFlags,_In_  DWORD_PTR dwContext);

extern LPVOID(WINAPI *VirtualAllocNext)(_In_opt_ LPVOID lpAddress, _In_ SIZE_T dwSize, _In_ DWORD  flAllocationType, _In_ DWORD  flProtect);
LPVOID WINAPI VirtualAllocCallback(_In_opt_ LPVOID lpAddress,_In_ SIZE_T dwSize,_In_ DWORD  flAllocationType,_In_ DWORD  flProtect);

extern HANDLE (WINAPI *HeapCreateNext)(DWORD  flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
HANDLE WINAPI HeapCreateCallback(DWORD  flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);

extern BOOL (WINAPI *WriteProcessMemoryNext)( HANDLE  hProcess, LPVOID  lpBaseAddress,LPCVOID lpBuffer, SIZE_T  nSize,SIZE_T  *lpNumberOfBytesWritten);
BOOL WINAPI WriteProcessMemoryCallback(HANDLE  hProcess, LPVOID  lpBaseAddress, LPCVOID lpBuffer, SIZE_T  nSize, SIZE_T  *lpNumberOfBytesWritten);

extern BOOL (WINAPI *VirtualProtectNext)(LPVOID lpAddress,SIZE_T dwSize, DWORD  flNewProtect,PDWORD lpflOldProtect);
BOOL WINAPI VirtualProtectCallback(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect);

extern BOOL (WINAPI *SetProcessDEPPolicyNext)(_In_ DWORD dwFlags);
BOOL WINAPI SetProcessDEPPolicyCallback(_In_ DWORD dwFlags);

#endif